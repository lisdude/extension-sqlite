@create $generic_help named SQLite Help:SQLite Help,Help,SQLite
@prop #100."sqlite_open" {} rc
;;#100.("sqlite_open") = {"Syntax:	  sqlite_open(STR <path to database>, [INT options]) => INT", "", "The function `sqlite_open' will attempt to open the database at <path> for use with SQLite.", "", "The second argument is a bitmask of options. Options are:", "", "	SQLITE_PARSE_OBJECTS [4]:    Determines whether strings beginning with a pound symbol (#) are interpreted as MOO object numbers or not.", "                                     The default is true, which means that any queries that would return a string (such as \"#123\") will be returned as objects.", "	SQLITE_PARSE_TYPES [2]:      If unset, no parsing of rows takes place and only strings are returned.", "	SQLITE_SANITIZE_STRINGS [8]: If set, newlines (\\n) are converted into tabs (\\t) to avoid corrupting the MOO database. Default is unset.", "", "NOTE: If the MOO doesn't support bitmasking, you can still specify options. You'll just have to manipulate the int yourself. e.g. if you want to parse objects and types, arg[2] would be a 6. If you only want to parse types, arg[2] would be 2.", "", "If successful, the function will return the numeric handle for the open database.", "", "If unsuccessful, the function will return a helpful error message.", "", "If the database is already open, a traceback will be thrown that contains the already open database handle."}
@prop #100."sqlite_close" {} rc
;;#100.("sqlite_close") = {"Syntax:	  sqlite_close(INT <database handle) => INT", "", "This function will close an open database.", "", "If successful, return 1;", "", "If unsuccessful, returns E_INVARG."}
@prop #100."sqlite_handles" {} rc
;;#100.("sqlite_handles") = {"Syntax:	  sqlite_handles() => LIST", "", "Returns a list of open SQLite database handles."}
@prop #100."sqlite_info" {} rc
;;#100.("sqlite_info") = {"Syntax:	  sqlite_info(INT <database handle>) => MAP", "", "This function returns a map of information about the database at <handle>", "", "The information returned is:", "	Database Path", "	Type parsing enabled?", "	Object parsing enabled?", "	String sanitation enabled?"}
@prop #100."sqlite_query" {} rc
;;#100.("sqlite_query") = {"Syntax:	  sqlite_query(INT <database handle>, STR <database query>) => [LIST or STR]", "", "This function will attempt to execute the query given in <query> on the database referred to by <handle>.", "", "On success, this function will return a list identifying the returned rows. If the query didn't return rows but was successful, an empty list is returned.", "", "If the query fails, a string will be returned identifying the SQLite error message.", "", "WARNING: sqlite_query does NOT use prepared statements and should NOT be used on queries that contain user input."}
@prop #100."sqlite_execute" {} rc
;;#100.("sqlite_execute") = {"Syntax:	  sqlite_execute(INT <database handle>, STR <SQL prepared statement query>, LIST <values>) => [LIST or STR]", "", "This function will attempt to create and execute the prepared statement query given in <query> on the database referred to by <handle> with the values <values>.", "", "On success, this function will return a list identifying the returned rows. If the query didn't return rows but was successful, an empty list is returned.", "", "If the query fails, a string will be returned identifying the SQLite error message.", "", "sqlite_execute uses prepared statements, so it's the preferred function to use for security and performance reasons.", "", "Example:", "sqlite_execute(0, \"INSERT INTO users VALUES (?, ?, ?);\", {#7, \"lisdude\", \"Albori Sninvel\"})"}
@prop #100."sqlite_last_insert_row_id" {} rc
;;#100.("sqlite_last_insert_row_id") = {"Syntax:	  sqlite_last_insert_row_id(INT <database handle>)", "", "This function identifies the row ID of the last insert command executed on the database."}
@prop #100."sqlite" {} rc
;;#100.("sqlite") = {"SQLite allows you to store information in locally hosted SQLite databases. The following functions (see HELP <function name> for detailed information) are available:", "", "sqlite_open         Opens an SQLite database.", "sqlite_close        Closes an SQLite database.", "sqlite_handles      Returns a list of open SQLite database handles.", "sqlite_info         Returns information about an open SQLite database.", "sqlite_query        Runs a raw SQL query on the database.", "sqlite_execute      Executes an SQL prepared statement on the database."}
;;#100.("aliases") = {"SQLite Help", "Help", "SQLite"}
;;#100.("description") = {"A help database of the standard form in need of a description. See `help $generic_help'..."}

"***finished***
